/*
 *  Minecraft Application Backup Utility: A multi-platform backup utility for Minecraft running on java
 *  Copyright (C) 2013 Jahed Hossain
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * 
 *  Contact Author: jahedev@gmail.com
 */

package mabu.panels;

import mabu.Debug;
import mabu.Main;
import mabu.preferences.AppPreferences;
import mabu.preferences.AppPreferenceHelper;

import java.io.File;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import javax.swing.DefaultListModel;

import org.fuin.utils4j.Utils4J;

/**
 *
 * @author Jahed
 */
public class MainPanel extends javax.swing.JPanel
{

    AppPreferences appPrefs;
    Debug debug;

    /**
     * Creates new form MainPanel
     */
    public MainPanel(Main main)
    { // NOTICE that the constructor takes Main as an argument so that it can use properties of Main itself
        appPrefs = new AppPreferences();
        debug = new Debug();

        initComponents();
        updatePreviousBackupListings(); // refreshes the JList which shows the names of backup files
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        selectPreviousBackupText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        previousBackupsList = new javax.swing.JList();
        nameOfWorldText = new javax.swing.JLabel();
        backupButton = new javax.swing.JButton();
        restoreButton = new javax.swing.JButton();
        deleteSelectedButton = new javax.swing.JButton();
        deleteOthersButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        currentBackupCreationText = new javax.swing.JLabel();
        currentBackupCreationTimeText = new javax.swing.JLabel();
        statusText = new javax.swing.JLabel();
        statusInfo = new javax.swing.JLabel();

        setBackground(new java.awt.Color(51, 51, 51));
        setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        addMouseListener(new java.awt.event.MouseAdapter()
        {
            public void mouseEntered(java.awt.event.MouseEvent evt)
            {
                mainPanelMouseEnteredActionPerformed(evt);
            }
        });

        selectPreviousBackupText.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        selectPreviousBackupText.setForeground(new java.awt.Color(255, 255, 255));
        selectPreviousBackupText.setText("Select a previous backup");

        previousBackupsList.setBackground(new java.awt.Color(51, 51, 51));
        previousBackupsList.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        previousBackupsList.setForeground(new java.awt.Color(255, 255, 255));
        previousBackupsList.setModel(new javax.swing.AbstractListModel()
        {
            String[] strings = { "Minecraft 08-12-2013 08-34-21", "Minecraft 08-12-2013 08-39-23", "Minecraft 08-12-2013 08-50-41" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        previousBackupsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        previousBackupsList.setToolTipText("");
        previousBackupsList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        previousBackupsList.setDoubleBuffered(true);
        previousBackupsList.setPreferredSize(new java.awt.Dimension(200, 51));
        previousBackupsList.setSelectedIndex(1);
        previousBackupsList.addListSelectionListener(new javax.swing.event.ListSelectionListener()
        {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt)
            {
                previousBackupsListActionPerformed(evt);
            }
        });
        jScrollPane1.setViewportView(previousBackupsList);

        nameOfWorldText.setBackground(new java.awt.Color(255, 255, 255));
        nameOfWorldText.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        nameOfWorldText.setForeground(new java.awt.Color(11, 181, 255));
        nameOfWorldText.setText(appPrefs.getWorldToBackup());

        backupButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        backupButton.setText("Backup");
        backupButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backupButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                backupButtonActionPerformed(evt);
            }
        });

        restoreButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        restoreButton.setText("Restore");
        restoreButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        restoreButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                restoreButtonActionPerformed(evt);
            }
        });

        deleteSelectedButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        deleteSelectedButton.setText("Delete Selected");
        deleteSelectedButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteSelectedButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteSelectedButtonActionPerformed(evt);
            }
        });

        deleteOthersButton.setFont(new java.awt.Font("Arial", 1, 18)); // NOI18N
        deleteOthersButton.setText("Delete Others");
        deleteOthersButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        deleteOthersButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                deleteOthersButtonActionPerformed(evt);
            }
        });

        currentBackupCreationText.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        currentBackupCreationText.setForeground(new java.awt.Color(238, 136, 51));
        currentBackupCreationText.setText("Current Backup Creation: ");

        currentBackupCreationTimeText.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        currentBackupCreationTimeText.setForeground(new java.awt.Color(255, 255, 255));
        currentBackupCreationTimeText.setText("--/--/---- --:--:--");

        statusText.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        statusText.setForeground(new java.awt.Color(238, 136, 51));
        statusText.setText("Status:");

        statusInfo.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        statusInfo.setForeground(new java.awt.Color(255, 255, 255));
        statusInfo.setText("Waiting for user input");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(selectPreviousBackupText)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(restoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(nameOfWorldText)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(deleteSelectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteOthersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 390, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(currentBackupCreationText)
                            .addComponent(statusText))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(statusInfo)
                            .addComponent(currentBackupCreationTimeText))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectPreviousBackupText)
                    .addComponent(nameOfWorldText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(backupButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(restoreButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteOthersButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(deleteSelectedButton, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(currentBackupCreationText)
                            .addComponent(currentBackupCreationTimeText))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(statusInfo)
                            .addComponent(statusText))
                        .addGap(0, 50, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backupButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backupButtonActionPerformed
        try
        {
            String worldToBackup = appPrefs.getWorldToBackup();
            File worldToBackupDir = new File(appPrefs.getMinecraftLocation() + File.separator + "saves" + File.separator + worldToBackup);
            File backupLocationDir = new File(appPrefs.getBackupLocation() + File.separator + worldToBackup);

            if (!backupLocationDir.exists())
            {
                backupLocationDir.mkdirs();
            }

            String ext = (appPrefs.isDefaultExtMBF() ? ".mbf" : ".zip");
            DateFormat dateFormat = new SimpleDateFormat("MM-dd-yy HH-mm-ss");
            Date date = new Date();
            File backupFile = new File(backupLocationDir + File.separator + worldToBackup + " " + dateFormat.format(date) + ext);

            if (worldToBackupDir.exists() && backupLocationDir.exists())
            {
                File[] filesInDir = backupLocationDir.listFiles();
                Arrays.sort(filesInDir);

                Utils4J.zipDir(worldToBackupDir, worldToBackupDir.getName(), backupFile);
                updatePreviousBackupListings();
                statusInfo.setText("Last backup was complete");
            }
        } catch (Exception ex)
        {
            statusInfo.setText("Error: On last backup: " + ex);
            debug.printDebugInfo("Error: On backing-up selected world: " + ex);
        }
    }//GEN-LAST:event_backupButtonActionPerformed

    private void restoreButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restoreButtonActionPerformed
        // If any files are not found or missing, it will do nothing
        File selectedBackupFile;
        File savesDir = new File(appPrefs.getMinecraftLocation() + File.separator + "saves");
        File oldWorldsDir = new File(appPrefs.getBackupLocation() + File.separator + "~Worlds.old");
        File currentWorldState = new File(oldWorldsDir + File.separator + appPrefs.getWorldToBackup() + ".zip");
        String backupFileName = (String) previousBackupsList.getSelectedValue();

        try
        {
            if (currentWorldState.exists())
            {
                currentWorldState.delete();
            }
            else
            {
                if (!oldWorldsDir.exists())
                {
                    oldWorldsDir.mkdirs();
                }
            }

            if (backupFileName != null)
            {
                selectedBackupFile = new File(appPrefs.getBackupLocation() + File.separator + appPrefs.getWorldToBackup() + File.separator + backupFileName);

                if (selectedBackupFile.exists())
                {
                    // Create a backup of the current state of the world (just in case for the user)
                    Utils4J.zipDir(savesDir, appPrefs.getWorldToBackup(), currentWorldState);
                    
                    // Now delete the current state of the world
                    savesDir.delete();
                    
                    Utils4J.unzip(selectedBackupFile, savesDir);
                }
            }
            statusInfo.setText("Last restoration was complete");
        }
        catch (Exception ex)
        {
            statusInfo.setText("Error: On last restoration operation: " + ex);
            debug.printDebugInfo("Error: On restoring from selected backup file: " + ex + "\n");
        }
    }//GEN-LAST:event_restoreButtonActionPerformed

    private void deleteSelectedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteSelectedButtonActionPerformed
        // TODO add your handling code here:
        DefaultListModel defaultListModel;
        defaultListModel = (DefaultListModel) previousBackupsList.getModel();
        String selectedValue = (String) previousBackupsList.getSelectedValue();
        File file = new File(appPrefs.getBackupLocation() + File.separator + appPrefs.getWorldToBackup() + File.separator + selectedValue);

        if (!defaultListModel.isEmpty())
        {
            try
            {
                file.delete();
                defaultListModel.removeElementAt(previousBackupsList.getSelectedIndex());
                statusInfo.setText("Last delete operation was complete");
            } catch (Exception ex)
            {
                statusInfo.setText("Error: On last delete operation: " + ex);
                debug.printDebugInfo("Error: On deleting selected backup file: " + ex + "\n");
            }
        }
    }//GEN-LAST:event_deleteSelectedButtonActionPerformed

    private void deleteOthersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOthersButtonActionPerformed

        DefaultListModel defaultListModel = (DefaultListModel) previousBackupsList.getModel();
        // A fair note that if an element is not selected, an ArrayIndexOutOfBoundsException exception will be thrown 
        int selectedIndex = previousBackupsList.getSelectedIndex();
        String selectedElement = (String) previousBackupsList.getSelectedValue();
        String otherElements[];

        defaultListModel.remove(selectedIndex); // delete the selected index from model

        try
        {
            for (int i = 0; i < defaultListModel.size(); i++) // Delete all other files
            {
                new File(appPrefs.getBackupLocation() + File.separator + appPrefs.getWorldToBackup() + File.separator + (String) defaultListModel.get(i)).delete();
            }

            defaultListModel.clear(); // remove all elements of defaultListModel
            defaultListModel.addElement(selectedElement); // add the element that was selected
            previousBackupsList.setModel(defaultListModel); // set the Model of the actual listbox
            statusInfo.setText("Last delete others operation was complete");
        } catch (Exception ex)
        {
            statusInfo.setText("Error: On last delete others operation: " + ex);
            debug.printDebugInfo("Error: On deleting other backups: " + ex + "\n");
        }
    }//GEN-LAST:event_deleteOthersButtonActionPerformed

    private void previousBackupsListActionPerformed(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_previousBackupsListActionPerformed
    {//GEN-HEADEREND:event_previousBackupsListActionPerformed
        statusInfo.setText("Waiting for user input");
        try
        {
            File file = new File(appPrefs.getBackupLocation() + File.separator + appPrefs.getWorldToBackup() + File.separator + previousBackupsList.getSelectedValue());

            SimpleDateFormat sdf = new SimpleDateFormat("MM/dd/yyyy HH:mm:ss");

            currentBackupCreationTimeText.setText(sdf.format(file.lastModified()));
        } catch (Exception ex)
        {
            debug.printDebugInfo("Error: On updating 'Current Backup Creation' date: " + ex);
        }
    }//GEN-LAST:event_previousBackupsListActionPerformed

    private void mainPanelMouseEnteredActionPerformed(java.awt.event.MouseEvent evt)//GEN-FIRST:event_mainPanelMouseEnteredActionPerformed
    {//GEN-HEADEREND:event_mainPanelMouseEnteredActionPerformed
        appPrefs.loadPreferences(); // Get any changed preferences
        nameOfWorldText.setText(appPrefs.getWorldToBackup()); // In case the user changed the world
        updatePreviousBackupListings();
    }//GEN-LAST:event_mainPanelMouseEnteredActionPerformed

    public void forceButtonsActionPerformed(String buttonName) throws Throwable
    {
        switch (buttonName)
        {
            case "backupButton":
                backupButtonActionPerformed(null);
                break;
            case "restoreButton":
                restoreButtonActionPerformed(null);
                break;
            case "deleteSelectedButton":
                deleteSelectedButtonActionPerformed(null);
                break;
            case "deleteOthersButton":
                deleteOthersButtonActionPerformed(null);
                break;
            default:
                throw (new Throwable("Button name specified is not recognized"));
        }
    }

    public final void updatePreviousBackupListings() // Updates the defaultListModel box with the names of backup files
    {
        try
        {
            File backupDir = new File(appPrefs.getBackupLocation() + File.separator + appPrefs.getWorldToBackup());
            DefaultListModel defaultListModel = new DefaultListModel();
            String selectedValue = (String) previousBackupsList.getSelectedValue();

            if (!backupDir.exists())
            {
                defaultListModel.addElement("Error: Couldn't find backup location");
                debug.printDebugInfo("Error: Couldn't find backup location, reseting backup location.");
                appPrefs.setBackupLocation(AppPreferenceHelper.defaultBackupLocation());
                previousBackupsList.setModel(defaultListModel);
            } else
            {
                File backupDirListings[];
                backupDirListings = backupDir.listFiles();
                String ext = (appPrefs.isDefaultExtMBF() ? "mbf" : "zip");

                String backupDirListingsString[] = new String[backupDirListings.length];

                for (int i = 0; i < backupDirListings.length; i++)
                {
                    backupDirListingsString[i] = backupDirListings[i].getName();
                }

                List< String> list = Arrays.asList(backupDirListingsString);

                Collections.sort(list, Collections.reverseOrder());

                backupDirListingsString = list.toArray(new String[backupDirListings.length]);

                if (backupDirListings.length != 0)
                {
                    for (int i = 0; i < backupDirListingsString.length; i++)
                    {
                        if (getExtension(backupDirListingsString[i]).equalsIgnoreCase(ext))
                        {
                            defaultListModel.addElement(backupDirListingsString[i]);
                        }
                    }

                } else
                {
                    statusInfo.setText("No backup files were found");
                }

                previousBackupsList.setModel(defaultListModel);

                if (selectedValue != null)
                {
                    previousBackupsList.setSelectedValue(selectedValue, true);
                }
            }
        } catch (Exception ex)
        {
            statusInfo.setText("Error: On updating backup files list: " + ex);
            debug.printDebugInfo("Error: On updating backup files list: " + ex + "\n");
        }
    }

    public static String getExtension(File f)
    { // Used the get the extention of a File (.mbf or .zip or something else?)
        String ext = null;
        String s = f.getName();
        int i = s.lastIndexOf('.');

        if (i > 0 && i < s.length() - 1)
        {
            ext = s.substring(i + 1).toLowerCase();
        }

        if (ext == null)
        {
            return "";
        }
        return ext;
    }

    public static String getExtension(String sf)
    {
        return getExtension(new File(sf));
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backupButton;
    private javax.swing.JLabel currentBackupCreationText;
    private javax.swing.JLabel currentBackupCreationTimeText;
    private javax.swing.JButton deleteOthersButton;
    private javax.swing.JButton deleteSelectedButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel nameOfWorldText;
    private javax.swing.JList previousBackupsList;
    private javax.swing.JButton restoreButton;
    private javax.swing.JLabel selectPreviousBackupText;
    private javax.swing.JLabel statusInfo;
    private javax.swing.JLabel statusText;
    // End of variables declaration//GEN-END:variables
}
